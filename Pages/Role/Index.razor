@page "/role"
@attribute [Authorize]
@using DashboardApp.Services
@using DashboardApp.Models
@inject RoleApiClient RoleService
@inject MenuApiClient MenuService
@inject NavigationManager Navigation

<PageTitle>Role List</PageTitle>

<h1>Role List</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="d-flex justify-content mb-3">
        <button class="btn btn-primary" @onclick="OpenCreateRole">Add Role</button>
    </div>

    <form method="get" @onsubmit="SearchRoles">
        <div class="d-flex w-100 mb-3">
            <div class="flex-grow-1">
                <input type="text" class="form-control" style="width:99%" id="searchQuery" name="searchQuery" placeholder="Search by Name or Description" @bind="searchQuery">
            </div>
            <div class="ms-3">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </div>
    </form>

    @if (roles.Count == 0)
    {
        <div class="alert alert-warning" role="alert">
            No roles found matching your search.
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var role in roles)
            {
                <tr>
                    <td>@role.Name</td>
                    <td>@role.Description</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => OpenEditRole(role)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteRole(role)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination justify-content-end">
        <select class="mx-2" @onchange="OnItemsPerPageChanged">
            <option value="5" selected="@((PageSize == 5) ? "selected" : null)">5</option>
            <option value="10" selected="@((PageSize == 10) ? "selected" : null)">10</option>
            <option value="50" selected="@((PageSize == 50) ? "selected" : null)">50</option>
            <option value="100" selected="@((PageSize == 100) ? "selected" : null)">100</option>
        </select>

        <button class="btn btn-info" @onclick="() => LoadRoles(PageNumber - 1)" disabled="@((PageNumber <= 1))">Prev</button>
        <span class="mt-2 mx-2"> Page @PageNumber of @TotalPages </span>
        <button class="btn btn-info" @onclick="() => LoadRoles(PageNumber + 1)" disabled="@((PageNumber >= TotalPages))">Next</button>
    </div>


}

<div class="modal" tabindex="-1" style="display:@(showModal ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@modalTitle</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body" style="max-height: 400px; overflow-y: auto;">
                <EditForm Model="tempRole" OnValidSubmit="SaveRole">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="Name">Name</label>
                        <InputText id="Name" class="form-control" @bind-Value="tempRole.Name" />
                    </div>
                    <div class="form-group">
                        <label for="Description">Description</label>
                        <InputText id="Description" class="form-control" @bind-Value="tempRole.Description" />
                    </div>
                    <div class="form-group">
                        <label>Menus</label>
                        <div style="border: 1px solid #ccc; height: 200px; overflow-y: auto;">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Menu Name</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var menu in menus)
                                    {
                                        <tr>
                                            <td>
                                                <InputCheckbox @bind-Value="menu.IsSelected" />
                                            </td>
                                            <td>@menu.Name</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Permissions</label>
                        <div class="form-check">
                            <InputCheckbox id="CanView" class="form-check-input" @bind-Value="tempRole.CanView" />
                            <label for="CanView" class="form-check-label">Can View</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="CanCreate" class="form-check-input" @bind-Value="tempRole.CanCreate" />
                            <label for="CanCreate" class="form-check-label">Can Create</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="CanUpdate" class="form-check-input" @bind-Value="tempRole.CanUpdate" />
                            <label for="CanUpdate" class="form-check-label">Can Update</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="CanDelete" class="form-check-input" @bind-Value="tempRole.CanDelete" />
                            <label for="CanDelete" class="form-check-label">Can Delete</label>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary me-2">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Role> roles = new List<Role>();
    private Role currentRole = new Role();
    private RoleRequest tempRole = new RoleRequest();
    private List<MenuForSelect> menus = new List<MenuForSelect>();
    private bool showModal = false;
    private string modalTitle;
    private string searchQuery = string.Empty;
    private int PageNumber = 1;
    private int PageSize = 5;
    private int TotalPages = 1;
    private bool isLoading = false;
    private bool selectAll;
    private HashSet<int> selectedMenuIds = new HashSet<int>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RoleService.InitializeClientIdAsync();
            await LoadRoles(PageNumber);
        }
        catch (UnauthorizedAccessException)
        {
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    
    private async Task LoadRoles(int pageNumber = 1)
    {
        isLoading = true;
        try
        {
            var response = await RoleService.GetRoles(pageNumber, PageSize, searchQuery);
            roles = response?.Roles ?? new List<Role>();
            menus = await MenuService.GetMenusOnly("");
            TotalPages = response?.TotalPages ?? 1;
            PageNumber = response?.PageNumber ?? 1;
        }
        catch (HttpRequestException ex)
        {
            roles = new List<Role>();
            TotalPages = 1;
            Console.WriteLine($"Error loading roles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task Next()
    {
        await LoadRoles(PageNumber++);
    }

    private async Task Back()
    {
        await LoadRoles(PageNumber--);
    }

    private async Task ResizePage(int pageSize)
    {
        PageSize = pageSize;
        await LoadRoles(1);
    }

    private async Task OnItemsPerPageChanged(ChangeEventArgs e)
    {
        PageSize = int.Parse(e.Value.ToString());
        PageNumber = 1; 
        await LoadRoles(PageNumber);
    }


    private async Task OnSearchInput()
    {
        PageNumber = 1;
        await LoadRoles(PageNumber);
    }

    private async Task SearchRoles()
    {
       PageNumber = 1;
        await LoadRoles(PageNumber);
    }

    private void OpenCreateRole()
    {
        tempRole = new RoleRequest();
        modalTitle = "Add Role";
        showModal = true;
    }

    private void OpenEditRole(Role role)
    {
        tempRole.Id = role.Id;
        tempRole.Name = role.Name;
        tempRole.Description = role.Description;
        tempRole.CanView = role.CanView;
        tempRole.CanCreate = role.CanCreate;
        tempRole.CanUpdate = role.CanUpdate;
        tempRole.CanDelete = role.CanDelete;
        foreach (var menu in menus)
        {
            if (tempRole.MenuIds.Contains(menu.Id))
            {
                menu.IsSelected = true;
            }
        }

        modalTitle = "Edit Role";
        showModal = true;
    }

    private void CloseModal()
    {
        foreach (var menu in menus)
        {
            menu.IsSelected = false;
        }
        showModal = false;
    }

    private async Task SaveRole()
    {
        Console.WriteLine(tempRole);
        if (string.IsNullOrEmpty(tempRole.Name) || string.IsNullOrEmpty(tempRole.Description))
        {
            return;
        }

        tempRole.MenuIds = menus.Where(m => m.IsSelected).Select(m => m.Id).ToList();

        if (tempRole.Id == 0)
        {
            var response = await RoleService.CreateRole(tempRole);
            if (response.IsSuccessStatusCode)
            {
                await LoadRoles(PageNumber);
                showModal = false;
            }
        }
        else
        {
            var response = await RoleService.UpdateRole(tempRole.Id, tempRole);
            if (response.IsSuccessStatusCode)
            {
                await LoadRoles(PageNumber);
                showModal = false;
            }
        }
    }

    private void CancelEdit()
    {
        showModal = false;
    }

    private async Task DeleteRole(Role role)
    {
        var response = await RoleService.DeleteRole(role.Id);
        if (response.IsSuccessStatusCode)
        {
            await LoadRoles(PageNumber);
        }
    }

    private void ToggleAllCheckboxes(ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value;
        if (isChecked)
        {
            // Pilih semua menu
            selectedMenuIds = new HashSet<int>(menus.Select(m => m.Id));
        }
        else
        {
            // Hapus semua pilihan
            selectedMenuIds.Clear();
        }
    }


    private void ToggleMenuSelection(int menuId)
    {
        if (selectedMenuIds.Contains(menuId))
        {
            selectedMenuIds.Remove(menuId);
        }
        else
        {
            selectedMenuIds.Add(menuId);
        }
    }


}
