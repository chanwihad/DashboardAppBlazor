@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using DashboardApp.Models
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginRequest loginModel = new LoginRequest();

    private async Task HandleLogin()
    {
        var loginRequest = new LoginRequest
        {
            Username = loginModel.Username,
            Password = loginModel.Password
        };

        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/auth/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResponseModel>();

            // Simpan token dan username ke session
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "Token", result.Token);
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "Username", result.Username);
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "ClientId", result.ClientId);
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "UserMenus", JsonSerializer.Serialize(result.Menus));
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "CanCreate", result.Permissions.CanCreate.ToString().ToLower());
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "CanView", result.Permissions.CanView.ToString().ToLower());
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "CanUpdate", result.Permissions.CanUpdate.ToString().ToLower());
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "CanDelete", result.Permissions.CanDelete.ToString().ToLower());
            // Navigasi ke halaman utama
            Navigation.NavigateTo("/dashboard");
        }
        else
        {
            // Tampilkan error jika login gagal
            var errorMessage = await response.Content.ReadAsStringAsync();
            // Handle error message (e.g., show it on the page)
        }
    }

}
