@page "/forgot-password"

@inject NavigationManager Navigation
@using System.Net.Http.Json
@using System.Text.Json
@using DashboardApp.Services
@using DashboardApp.Models
@inject AuthApiClient AuthApiClient
 
<h2>Reset your password</h2>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

@if (Step == 1)
{
    <form @onsubmit="SendVerificationCode">
        <div class="form-group">
            <label for="email">Enter your email address</label>
            <div class="input-group">
                <input type="email" id="Email" @bind="Email" placeholder="Enter your email" class="form-control" />
                <button type="submit" class="btn btn-primary">Send</button>
            </div>
            <small>Enter the email address you used during registration. We'll send a verification code.</small>
        </div>
    </form>
}

@if (Step == 2)
{
    <form @onsubmit="VerifyCode">
        <div class="form-group">
            <label for="code">Verification code</label>
            <div class="input-group">
                <input type="text" id="Code" @bind="Code" placeholder="Verification code" class="form-control" required />
                <button type="submit" class="btn btn-primary">Verify</button>
            </div>
        </div>
    </form>
}

@if (Step == 3)
{
    <form @onsubmit="ResetPassword">
        <div class="form-group">
            <label for="Password">New Password</label>
            <input type="password" id="Password" @bind="Password" placeholder="Password" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="ConfirmPassword">Confirm Password</label>
            <input type="password" id="ConfirmPassword" @bind="ConfirmPassword" placeholder="Confirm Password" class="form-control" required />
        </div>
        <div class="d-flex justify-content-between mt-3">

            <button type="button" class="btn btn-secondary" href="/login">Back to Login</button>
            
            <button type="submit" class="btn btn-primary">Confirm</button>
        </div>

    </form>
}

@if(Step != 3)
{
    <a href="/login" class="btn btn-secondary">Back to Login</a>
}

@code {
    private string Email { get; set; } = string.Empty;
    private string Code { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;

    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;

    private int Step { get; set; } = 1; // 1: Email, 2: Verify, 3: Reset Password

    private async Task SendVerificationCode()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        if (string.IsNullOrEmpty(Email))
        {
            ErrorMessage = "Email is required.";
            return;
        }

        var response = await AuthApiClient.SendVerificationCode(Email);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<VerificationRequest>();
            SuccessMessage = $"Verification code sent! (Code: {result.Code})";
            Step = 2;
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var jsonDoc = JsonDocument.Parse(responseContent);
            ErrorMessage = jsonDoc.RootElement.GetProperty("message").GetString();
        }
    }

    private async Task VerifyCode()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        if (string.IsNullOrEmpty(Code))
        {
            ErrorMessage = "Verification code is required!";
            return;
        }
        
        var verifyRequest = new VerificationRequest
        {
            Email = Email,
            Code = Code
        };

        var response = await AuthApiClient.VerifyCode(verifyRequest);

        if (response.IsSuccessStatusCode)
        {
            SuccessMessage = "Verification successful!";
            Step = 3;
        }
        else
        {
            ErrorMessage = "Verification failed. Please try again.";
        }
    }

    private async Task ResetPassword()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        if (string.IsNullOrEmpty(Password) || string.IsNullOrEmpty(ConfirmPassword))
        {
            ErrorMessage = "Password and Confirm Password are required.";
            return;
        }

        if (Password != ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        }

        var newPass = new NewPassword
        {
            Email = Email,
            Password = Password,
            ConfirmPassword = ConfirmPassword
        };

        var response = await AuthApiClient.ResetPassword(newPass);
        
        if (response.IsSuccessStatusCode)
        {
            SuccessMessage = "Password reset successful! Redirecting to login...";
            await Task.Delay(500);
            Navigation.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = "Password reset failed. Please try again.";
        }
    }
}
