@page "/user"
@attribute [Authorize]
@using DashboardApp.Services
@using DashboardApp.Models
@inject UserApiClient UserService
@inject RoleApiClient RoleService
@inject NavigationManager Navigation

<PageTitle>User List</PageTitle>

<h1>User List</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="d-flex justify-content mb-3">
        <button class="btn btn-primary" @onclick="OpenCreateUser">Add User</button>
    </div>

    <form method="get" @onsubmit="SearchUsers">
        <div class="d-flex w-100 mb-3">
            <div class="flex-grow-1">
                <input type="text" class="form-control" style="width:99%" id="searchQuery" name="searchQuery" placeholder="Search by Name or Description" @bind="searchQuery">
            </div>
            <div class="ms-3">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </div>
    </form>

    @if (users.Count == 0)
    {
        <div class="alert alert-warning" user="alert">
            No users found matching your search.
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Full Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Username</td>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>@user.RoleName</td>
                    <td>@user.Status</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => OpenEditUser(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination justify-content-end">
        <select class="mx-2" @onchange="OnItemsPerPageChanged">
            <option value="5" selected="@((PageSize == 5) ? "selected" : null)">5</option>
            <option value="10" selected="@((PageSize == 10) ? "selected" : null)">10</option>
            <option value="50" selected="@((PageSize == 50) ? "selected" : null)">50</option>
            <option value="100" selected="@((PageSize == 100) ? "selected" : null)">100</option>
        </select>

        <button class="btn btn-info" @onclick="() => LoadUsers(PageNumber - 1)" disabled="@((PageNumber <= 1))">Prev</button>
        <span class="mt-2 mx-2"> Page @PageNumber of @TotalPages </span>
        <button class="btn btn-info" @onclick="() => LoadUsers(PageNumber + 1)" disabled="@((PageNumber >= TotalPages))">Next</button>
    </div>


}

<div class="modal" tabindex="-1" style="display:@(showModal ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@modalTitle</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body" style="max-height: 400px; overflow-y: auto;">
                <EditForm Model="currentUser" OnValidSubmit="SaveUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="Username">Username</label>
                        <InputText id="Username" class="form-control" @bind-Value="currentUser.Username" />
                    </div>
                    <div class="form-group">
                        <label for="FullName">Full Name</label>
                        <InputText id="FullName" class="form-control" @bind-Value="currentUser.FullName" />
                    </div>
                    <div class="form-group">
                        <label for="Email">Email</label>
                        <InputText id="Email" class="form-control" @bind-Value="currentUser.Email" />
                    </div>

                    <div class="form-group">
                        <label for="RoleName">Role</label>
                        <InputSelect id="RoleId" class="form-control" @bind-Value="currentUser.RoleId">
                            <option value="">-- Select Role --</option>
                            @foreach (var role in roles)
                            {
                                <option value="@role.Id">@role.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label for="Password">Password</label>
                        <InputText id="Password" type="password" class="form-control" @bind-Value="currentUser.Password" />
                        <small class="form-text text-muted">Leave blank if you do not want to change the password.</small>
                    </div>

                    <div class="form-group">
                        <label for="ConfirmPassword">Confirm Password</label>
                        <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="currentUser.ConfirmPassword" />
                    </div>

                    <div class="form-group">
                        <label for="Status">Status</label>
                        <InputSelect id="Status" class="form-control" @bind-Value="currentUser.Status">
                            <option value="Active" selected="currentUser.Status == "Active"">Active</option>
                            <option value="Inactive" selected="currentUser.Status == "Inactive"">Inactive</option>
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label for="MaxRetry">Max Retry</label>
                        <InputNumber id="MaxRetry" class="form-control" @bind-Value="currentUser.MaxRetry" />
                    </div>

                    <div class="form-group">
                        <label for="Retry">Retry</label>
                        <InputNumber id="Retry" class="form-control" @bind-Value="currentUser.Retry" />
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary me-2">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<User> users = new List<User>();
    private UserRequest currentUser = new UserRequest();
    private List<Role> roles = new List<Role>();
    private bool showModal = false;
    private string modalTitle;
    private string searchQuery = string.Empty;
    private int PageNumber = 1;
    private int PageSize = 5;
    private int TotalPages = 1;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await UserService.InitializeClientIdAsync();
            await LoadUsers(PageNumber);
        }
        catch (UnauthorizedAccessException)
        {
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    
    private async Task LoadUsers(int pageNumber = 1)
    {
        isLoading = true;
        try
        {
            var response = await UserService.GetUsers(pageNumber, PageSize, searchQuery);
            users = response?.Users ?? new List<User>();
            roles = await RoleService.GetRolesOnly("");
            TotalPages = response?.TotalPages ?? 1;
            PageNumber = response?.PageNumber ?? 1;
        }
        catch (HttpRequestException ex)
        {
            users = new List<User>();
            TotalPages = 1;
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task Next()
    {
        await LoadUsers(PageNumber++);
    }

    private async Task Back()
    {
        await LoadUsers(PageNumber--);
    }

    private async Task ResizePage(int pageSize)
    {
        PageSize = pageSize;
        await LoadUsers(1);
    }

    private async Task OnItemsPerPageChanged(ChangeEventArgs e)
    {
        PageSize = int.Parse(e.Value.ToString());
        PageNumber = 1; 
        await LoadUsers(PageNumber);
    }


    private async Task OnSearchInput()
    {
        PageNumber = 1;
        await LoadUsers(PageNumber);
    }

    private async Task SearchUsers()
    {
       PageNumber = 1;
        await LoadUsers(PageNumber);
    }

    private void OpenCreateUser()
    {
        currentUser = new UserRequest();
        modalTitle = "Add User";
        showModal = true;
    }

    private void OpenEditUser(User user)
    {
        currentUser.Id = user.Id;
        currentUser.Username = user.Username;
        currentUser.FullName = user.FullName;
        currentUser.Email = user.Email;
        currentUser.Status = user.Status;
        currentUser.MaxRetry = user.MaxRetry;
        currentUser.Retry = user.Retry;
        currentUser.RoleId = user.RoleId;
        modalTitle = "Edit User";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveUser()
    {

        if (currentUser.Id == 0)
        {
            var response = await UserService.CreateUser(currentUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers(PageNumber);
                showModal = false;
            }
        }
        else
        {
           var response = await UserService.UpdateUser(currentUser.Id, currentUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers(PageNumber);
                showModal = false;
            }
        }
    }

    private void CancelEdit()
    {
        showModal = false;
    }

    private async Task DeleteUser(User user)
    {
        var response = await UserService.DeleteUser(user.Id);
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers(PageNumber);
        }
    }

}
